<#@ template language="C#" debug="True"  hostspecific="True" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.SqlServerCE" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace=" System.Data.SqlServerCe" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="System.Configuration" #>
<#
	//Begin Settings - Edit this section

	//Set connectionstring OR path to web.config or app.config and connectionstringname
	var ConnectionString = "MultipleActiveResultSets=True;Data Source=YourDatabaseServer;Initial Catalog=YourDatabase;User ID=YourUser;Password=YourPassword"; //option 1

	var PathToConfig = @"../Web.config"; //option 2
    	var ConnectionStringName = "Test"; //option 2

	var Namespace = "Models";
	var ExcludeTables = new string[]{"aspnet_","webpages_"};
	var ExcludeSingularizeTables = new string[]{"Campus"};
	var IncludeViews = true;
	//End Settings - Do not edit below this line
#>
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

// Generated POCOs from the <#=ConnectionStringName#> connection string.
// Do not manually edit this file

namespace <#=Namespace#>
{ 
<# 
SqlCeConnection serverConnection;
if(ConnectionString == "")
{
	var path = Host.ResolvePath(PathToConfig);
	var config = ConfigurationManager.OpenMappedExeConfiguration(new ExeConfigurationFileMap { ExeConfigFilename = path },ConfigurationUserLevel.None);
	var settings = config.GetSection("connectionStrings") as ConnectionStringsSection;
	serverConnection = new SqlCeConnection(settings.ConnectionStrings["" + ConnectionStringName + ""].ConnectionString);
}
else
{
	serverConnection = new SqlCeConnection(ConnectionString);
}

var DatabaseName = serverConnection.Database;
var svrConnection = new ServerConnection(serverConnection);
   
Server srv = new Server(svrConnection);
foreach (Table table in srv.Databases["" + DatabaseName +""].Tables)
{
	if(IsExcluded(table.Name, ExcludeTables) || table.IsSystemObject) continue;
#>

    /// <summary>
    /// A class which represents the <#=table.Name#> table in the <#=DatabaseName#> Database.
    /// </summary>
	[Table("<#= table.Name #>")]
	public class <#= CleanTableName(table.Name, ExcludeSingularizeTables) #>
	{
<#
foreach (Column col in table.Columns)
{
#>
	<# if (col.IdentityIncrement >0) { #>
	[Key]
	<# } #>
	public virtual <#= GetNetDataType(col.DataType.Name) #><#= GetNullable(col.Nullable, col.DataType.Name) #> <#= CleanColumnName(col.Name, CleanTableName(table.Name, ExcludeSingularizeTables)) #> { get; set; }
<#
}
#>
	}
      
<#}
#>

<#if(IncludeViews) { #>
<#
foreach (View view in srv.Databases["" + DatabaseName +""].Views)
{
	if (view.IsSystemObject) continue;
#>

	/// <summary>
    /// A class which represents the <#=view.Name#> view in the <#=DatabaseName#> Database.
    /// </summary>
	[Table("<#= view.Name #>")]
	public class <#=view.Name#>
	{
<#
foreach (Column col in view.Columns)
{
#>
		public virtual <#= GetNetDataType(col.DataType.Name) #><#= GetNullable(col.Nullable, col.DataType.Name) #> <#= CleanColumnName(col.Name, CleanTableName(view.Name, ExcludeSingularizeTables)) #> { get; set; }
<#
}
#>
	}
	<#
}
#>
<#
}
#>

}

<#+
        public static string GetNetDataType(string sqlDataTypeName)
        {

            switch (sqlDataTypeName.ToLower())
            {
                case "bigint":
                    return "Int64";
                case "binary":
                    return "Byte[]";
                case "bit":
                    return "bool";
                case "char":
                    return "char";
                case "cursor":
                    return string.Empty;
				case "date":
                    return "DateTime";
                case "datetime":
                    return "DateTime";
                case "decimal":
                    return "Decimal";
                case "float":
                    return "Double";
                case "int":
                    return "int";
                case "money":
                    return "Decimal";
                case "nchar":
                    return "string";
                case "numeric":
                    return "Decimal";
                case "nvarchar":
                    return "string";
                case "real":
                    return "single";
                case "smallint":
                    return "Int16";
                case "text":
                    return "string";
                case "tinyint":
                    return "Byte";
                case "varbinary":
                    return "Byte[]";
                case "xml":
                    return "string";
                case "varchar":
                    return "string";
                case "smalldatetime":
                    return "DateTime";
                case "image":
                    return "Byte[]";
				case "uniqueidentifier":
                    return "Guid";
              
                default:
                    return string.Empty;
            }

        }

		public static string GetNullable(bool nullable, string datatype)
        {
			if(GetNetDataType(datatype) == "string") return "";
			if(GetNetDataType(datatype) == "Byte[]") return "";
			return nullable ?  "?": "";
        }

		public static string Singularize(string word, string[] ExcludeSingularizeTables)
		{
			if(IsExcludeSingularizeTable(word, ExcludeSingularizeTables)) return word;
			var singularword = System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo.GetCultureInfo("en-us")).Singularize(word);
			return singularword;
		}
		
		public static string CleanTableName(string word, string[] ExcludeSingularizeTables)
		{		
			//clean the prefixes and underscores then singularize to create more singularizations
			var cleanword = word;
			if(cleanword.StartsWith("tbl_")) cleanword = cleanword.Replace("tbl_",""); 
			if(cleanword.StartsWith("tbl")) cleanword = cleanword.Replace("tbl",""); 
			cleanword = cleanword.Replace("_","");
		    cleanword = Singularize(cleanword, ExcludeSingularizeTables);
			return cleanword;
		}

		public static string CleanColumnName(string columnname, string tablename)
		{
			var newcolumnname = columnname;
			if(columnname == tablename) newcolumnname = "_ColumnNameAndTableNameMatchError_" + columnname; 
			if(columnname == "new") newcolumnname = "_new";
			return newcolumnname;
		}


		public static bool IsExcluded(string tablename, string[] ExcludeTables)
		{
			for (int i = 0; i < ExcludeTables.Length; i++)
			{
				string s = ExcludeTables[i];
				if(tablename.StartsWith(s)) return true;
			}
			return false;
        }

	    public static bool IsExcludeSingularizeTable(string tablename, string[] ExcludeSingularizeTables)
		{
			for (int i = 0; i < ExcludeSingularizeTables.Length; i++)
			{
				string s = ExcludeSingularizeTables[i];
				if(tablename.ToLower() == s.ToLower()) return true;
			}
			return false;
        }	

#>

